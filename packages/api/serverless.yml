service:
  name: circulate-be
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

package:
  individually: true
custom:
  webpack:
    keepOutputDirectory: true
    webpackConfig: ./webpack.config.js
    packager: 'yarn'
    includeModules: true

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-offline
  # - serverless-plugin-monorepo

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    CIRCLES_TABLE_NAME: 'circles-${self:provider.stage}'
    EVENTS_TABLE_NAME: 'events-${self:provider.stage}'
    CONTENT_TABLE_NAME: 'content-${self:provider.stage}'
    USERS_TABLE_NAME: 'users-${self:provider.stage}'
    UPCOMING_CIRCULATION_TABLE_NAME: 'upcomingCirculation-${self:provider.stage}'

    STAGE: ${opt:stage, 'dev'}
    IS_LOCAL: ${opt:is_local, 'false'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchGetItem
      Resource:
        - Fn::GetAtt: [circlesTable, StreamArn]
        - Fn::GetAtt: [eventsTable, StreamArn]
        - Fn::GetAtt: [contentTable, StreamArn]
        - Fn::GetAtt: [usersTable, StreamArn]
        - Fn::GetAtt: [upcomingCirculationTable, StreamArn]

functions:
  createCircle:
    name: 'createCircle-${self:provider.stage}'
    handler: src/endpoints/createCircle/createCircle.handler
    events:
      - http:
          method: post
          path: circles/create
          cors: true
          authorizer:
            arn: arn:aws:cognito-idp:us-east-1:441799942923:userpool/us-east-1_80QcO55dx
  joinCircle:
    name: 'joinCircle-${self:provider.stage}'
    handler: src/endpoints/joinCircle/joinCircle.handler
    events:
      - http:
          method: post
          path: circles/{circleId}/join
          cors: true
          authorizer:
            arn: arn:aws:cognito-idp:us-east-1:441799942923:userpool/us-east-1_80QcO55dx
  createEvent:
    name: 'createEvent-${self:provider.stage}'
    handler: src/endpoints/createEvent/createEvent.handler
    events:
      - http:
          method: post
          path: events/create
          cors: true
          authorizer:
            arn: arn:aws:cognito-idp:us-east-1:441799942923:userpool/us-east-1_80QcO55dx
  createContent:
    name: 'createContent-${self:provider.stage}'
    handler: src/endpoints/createContent/createContent.handler
    events:
      - http:
          method: post
          path: content
          cors: true
          authorizer:
            arn: arn:aws:cognito-idp:us-east-1:441799942923:userpool/us-east-1_80QcO55dx
  getMyCircles:
    name: 'getMyCircles-${self:provider.stage}'
    handler: src/endpoints/getMyCircles/getMyCircles.handler
    events:
      - http:
          method: get
          path: circles/me
          cors: true
          authorizer:
            arn: arn:aws:cognito-idp:us-east-1:441799942923:userpool/us-east-1_80QcO55dx
  getCircleById:
    name: 'getCircleById-${self:provider.stage}'
    handler: src/endpoints/getCircleById/getCircleById.handler
    events:
      - http:
          method: get
          path: circles/{circleId}/
          cors: true
          authorizer:
            arn: arn:aws:cognito-idp:us-east-1:441799942923:userpool/us-east-1_80QcO55dx
  getEventById:
    name: 'getEventById-${self:provider.stage}'
    handler: src/endpoints/getEventById/getEventById.handler
    events:
      - http:
          method: get
          path: events/{eventId}/
          cors: true
          authorizer:
            arn: arn:aws:cognito-idp:us-east-1:441799942923:userpool/us-east-1_80QcO55dx
  cognitoDynamoUserSyncTrigger:
    handler: src/triggers/postCognitoAuthentication/cognitoDynamoUserSyncTrigger.handler
    events:
      - cognitoUserPool:
          pool: circulate-users
          trigger: PostAuthentication
          existing: true
  # CirculationSender
  buildCirculationTable:
    handler: src/circulationSender/triggers/contentTable/buildCirculationTable.handler
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [contentTable, StreamArn]

resources:
  Resources:
    circlesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CIRCLES_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    eventsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.EVENTS_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    contentTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CONTENT_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USERS_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    upcomingCirculationTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.UPCOMING_CIRCULATION_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: urn
            AttributeType: S
        KeySchema:
          - AttributeName: urn
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
Outputs:
  UsersTableArn:
    Description: The ARN for the User's Table
    Value:
      'Fn::GetAtt': [usersTable, Arn]
    Export:
      Name: ${self:service}:${opt:stage}:UsersTableArn # see Fn::ImportValue to use in other services and http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/outputs-section-structure.html for documentation on use.
  CirclesTableArn:
    Description: The ARN for the Circles Table
    Value:
      'Fn::GetAtt': [circlesTable, Arn]
    Export:
      Name: ${self:service}:${opt:stage}:CirclesTableArn # see Fn::ImportValue to use in other services and http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/outputs-section-structure.html for documentation on use.
  ContentTableArn:
    Description: The ARN for the Content Table
    Value:
      'Fn::GetAtt': [contentTable, Arn]
    Export:
      Name: ${self:service}:${opt:stage}:ContentTableArn # see Fn::ImportValue to use in other services and http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/outputs-section-structure.html for documentation on use.
